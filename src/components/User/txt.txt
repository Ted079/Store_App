rauf
td@gmail.com
new@gmail.com
12345678


import React, { useState } from "react";
import styles from "./auth.module.scss";
import { Link, useNavigate } from "react-router-dom";
import LOGO from "../../images/logo.svg";
import { ROUTES } from "../../utils/route";
import { useDispatch } from "react-redux";
import { checkEmail, createUser } from "../../store/user/userSlice";

function Signup() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [values, setValues] = useState({
    name: "",
    email: "",
    password: "",
    avatar: "https://picsum.photos/800",
    // confirmPass: "",
  });

  const [error, setError] = useState({
    name: "",
    email: "",
    password: "",
  });


  const validateValues = (name, value) => {

    switch (name) {
      case "name":
        return value.length < 4 ? "Must be 4 or more charecters" : "";
      case "email":
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)
          ? ""
          : "Please enter a valid email adress";
      case "password":
        return value.length < 6 || value[0] !== value[0]?.toUpperCase()
          ? "Must be more than 6 letters"
          : "";
      // and the first letter must be capital
      default:
        return;
    }
  };

  const handleChange = (e) => {
    setValues({ ...values, [e.target.name]: e.target.value });
  };

  const handleBlur = (e) => {
    const errorMessage = validateValues(e.target.name, e.target.value);
    console.log(errorMessage);

    setError((prev) => ({ ...prev, [e.target.name]: errorMessage }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const newError = {};

    Object.keys(values).forEach((key) => {
      newError[key] = validateValues(key, values[key]);
    });

    setError(newError);

    if (Object.values(newError).some((err) => err)) {
      return;
    }

    // const checkUserEmail = dispatch(checkEmail(values.email));
    // if(checkUserEmail === true){
    //   return alert('aaa');
    // };
    // console.log(checkUserEmail); /////////+-+-+-///////////++-+-+-
    
    dispatch(createUser(values));
    navigate("/");
  };

  return (
    <div className={styles.container}>
      <div className={styles.wrapper}>
        <div className={styles.logo}>
          <img src={LOGO} alt="Stuff" />
        </div>

        <form className={styles.form} onSubmit={handleSubmit} noValidate>
          <div className={styles.group}>
            <input
              type="name"
              name="name"
              placeholder="Your name"
              value={values.name}
              autoComplete="off"
              onChange={handleChange}
              onBlur={handleBlur}
              required
            />
            {error ? <p className={styles.err}>{error.name}</p> : null}
            <input
              type="email"
              name="email"
              placeholder="Your email"
              value={values.email}
              autoComplete="off"
              onChange={handleChange}
              onBlur={handleBlur}
              required
            />
            {error && <p className={styles.err}>{error.email}</p>}

            <input
              type="password"
              name="password"
              placeholder="Your password"
              value={values.password}
              autoComplete="off"
              onChange={handleChange}
              onBlur={handleBlur}
              required
            />
            {error && <p className={styles.err}>{error.password}</p>}

            <button>Create an account</button>
            <div className={styles.msg}>
              <Link className={styles.link} to={ROUTES.LOGIN}>
                Sign in
              </Link>{" "}
              if you have an account yet.
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

export default Signup;





import React from "react";
import styles from "./Sidebar.module.scss";
import { NavLink, useLocation, Link } from "react-router-dom";
import { useSelector } from "react-redux";
import { ROUTES } from "../../utils/route";

const Sidebar = ({ type = "categories" }) => {
  const list = useSelector((state) => state.categories.list);
  const { isLoading, currentUser } = useSelector(({ user }) => user);

  const listForProfile = [
    { to: ROUTES.HOME, label: "Back to Home" },
    { to: ROUTES.HOME, label: "Cards" },
    { to: ROUTES.HOME, label: "Messages" },
    { to: ROUTES.HOME, label: "E-Check" },
  ];

  console.log(listForProfile);
  

  const location = useLocation();

  return (
    <section className={styles.sidebar}>
      <span className={styles.title}>
        {type === "categories" ? "CATEGORIES" : "PROFILE"}
      </span>
      <nav>
        <ul className={styles.menu}>
          {type === "categories" ? (
            list.slice(0, 9).map(({ id, name }) => (
              <li key={id}>
                <NavLink
                  className={({ isActive }) =>
                    `${styles.categories} ${isActive ? styles.active : ""}`
                  }
                  to={`/categories/${id}`}
                >
                  {name}
                </NavLink>
              </li>
            ))
          ) : !isLoading && !currentUser ? (
            <section className="preloader">...Loading</section>
          ) : (
            <>
              {listForProfile.map(({ to, label }) => (
                <li key={to}>
                  <Link to={to}>{label}</Link>
                </li>
              ))}
              {/* ;<li>{currentUser.avatar}</li>
              <li>{currentUser.name}</li>
              <li>{currentUser.email}</li> */}
            </>
          )}
        </ul>
      </nav>
      <div className={styles.footer}>
        <a
          href={"/help"}
          target="a_blank"
          className={`${styles.link} ${
            location.pathname === "/help" ? styles.active : ""
          }`}
        >
          Help
        </a>
        <NavLink
          to={"/terms"}
          target="a_blank"
          className={({ isActive }) =>
            `${styles.link} ${isActive ? styles.active : ""}`
          }
          style={{ textDecoration: "underline" }}
        >
          Terms and Condition
        </NavLink>
      </div>
    </section>
  );
};

export default Sidebar;



 <section className={styles.container}>
        <div className={styles.wrapper}>
          {/* <div className={styles.grids}> */}
          <div className={styles.user}>
            <div className={styles.info}>
              <p className={styles.name}>{currentUser.name}</p>
              {/* <p className={styles.name}>{currentUser.id}</p> */}
              <p className={styles.email}>{currentUser.email}</p>
              <p>{currentUser.role}</p>
            </div>
            <div
              className={styles.avatar}
              style={{ backgroundImage: `url(${currentUser.avatar})` }}
            ></div>
          </div>

          <Link to={ROUTES.SETTINGS} className={styles.edit}>
            <svg className={styles.icon}>
              <use
                xlinkHref={`${process.env.PUBLIC_URL}/newSprite.svg#edits`}
              />
            </svg>

            <span>Edit profile</span>
          </Link>

          <Link to={ROUTES.HOME} className={styles.edit}>
            <svg className={styles.icon}>
              <use xlinkHref={`${process.env.PUBLIC_URL}/newSprite.svg#card`} />
            </svg>
            Update card
          </Link>

          <div className={styles.grids}>
            <Link to={ROUTES.CART} className={styles.cart}>
            <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#cart`} />
              </svg>
              Cart
            </Link>
            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Favorites
            </Link>

            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Payment methods
            </Link>

            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Return history
            </Link>
            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Purchased items
            </Link>
            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Bonuses
            </Link>

            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Payment terms
            </Link>

            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Return terms
            </Link>

            <Link to={ROUTES.FAVORITE} className={styles.cart}>
              <svg className={styles["fav-icon"]}>
                <use xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`} />
              </svg>
              Order history
            </Link>
            {/* <button
              onClick={() => {
                dispatch(logOutUser());
                navigate("/login");
              }}
            >
              Log Out
            </button> */}
          </div>
        </div>
      </section>















      ///newww3333
      import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { logOutUser } from "../../store/user/userSlice";
import { Link, useNavigate } from "react-router-dom";
import { ROUTES } from "../../utils/route";
import styles from "./profile.module.scss";
import Sidebar from "../Sidebar/Sidebar";
import Products from "../Products/Products";
import IMG from "../../images/cart_img_2.jpg";

function Profile() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  // const filteredProducts = useSelector((state) => state.products.filtered);
  const favorite = useSelector((state) => state.user.favorite);

  const listForProfile = [
    { id: 1, to: ROUTES.HOME, label: "Back to Store" },
    { id: 2, to: ROUTES.HOME, label: "Cards" },
    { id: 3, to: ROUTES.HOME, label: "Messages" },
    { id: 4, to: ROUTES.HOME, label: "E-Check" },
    { id: 5, to: ROUTES.HOME, label: "Bonuses" },
  ];

  const { currentUser, isLoading } = useSelector(({ user }) => user);

  useEffect(() => {
    if (!isLoading && !currentUser) navigate("/login");
  }, [currentUser, isLoading]);

  if (isLoading) {
    return <section className="preloader">...Loading</section>;
  }

  return !currentUser ? (
    <section className="preloader">...Loading</section>
  ) : (
    <>
      <Sidebar title="PROFILE" list={listForProfile} />

      <section className={styles.container}>
        <div className={styles.wrapper}>
          <div className={styles.header}>
            <div className={styles.user}>
              <div
                className={styles.avatar}
                style={{ backgroundImage: `url(${currentUser.avatar})` }}
              />
              <div className={styles.info}>
                <p className={styles.name}>{currentUser.name}</p>
                <p className={styles.email}>{currentUser.email}</p>
                <p className={styles.role}>{currentUser.role}</p>
              </div>
            </div>
            {/* <div className={styles.actions}> */}
              <Link to={ROUTES.SETTINGS} className={styles.card}>
                <svg className={styles.icon}>
                  <use
                    xlinkHref={`${process.env.PUBLIC_URL}/newSprite.svg#edits`}
                  />
                </svg>
                <span>Edit</span>
              </Link>
              <Link to={ROUTES.HOME} className={styles.card}>
                <svg className={styles.icon}>
                  <use
                    xlinkHref={`${process.env.PUBLIC_URL}/newSprite.svg#card`}
                  />
                </svg>
                <span>Update Card</span>
              </Link>
              <button
                className={styles.card}
                onClick={() => {
                  dispatch(logOutUser());
                  navigate("/login");
                }}
              >
                <svg className={styles.icon}>
                  <use
                    xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#bag`}
                  />
                </svg>
                <span>Log Out</span>
              </button>
            </div>
          {/* </div> */}

          <div className={styles["grids-container"]}>
            <div className={styles.grid1}>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Payment Methods
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Return History
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Purchased Items
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Bonuses
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Order History
              </Link>
            </div>
            <div className={styles.grid2}>
              <Link to={ROUTES.CART} className={styles.card}>
                <svg className={styles.icon}>
                  <use
                    xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#bag`}
                  />
                </svg>
                <span>Cart</span>
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                <svg className={styles.icon}>
                  <use
                    xlinkHref={`${process.env.PUBLIC_URL}/sprite.svg#heart`}
                  />
                </svg>
                <span>Favorites</span>
              </Link>

              {/* <Link to={ROUTES.FAVORITE} className={styles.card}>
                Payment Terms
              </Link>
              <Link to={ROUTES.FAVORITE} className={styles.card}>
                Return Terms
              </Link> */}
            </div>
             </div>
        </div>
      </section>
      {favorite.length ? (
        <Products products={favorite} amount={6} title="Favorite goods" />
      ) : (
        <div> Your cart is empty</div>
      )}
    </>
  );
}


export default Profile;

.container {
  max-width: 950px;
  width: 100%;
  padding: 1rem;
  background-color: white;

  .wrapper {
    .header {
      // display: flex;
      gap: 2rem;
      .user {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        background-color: var(--generic);
        padding: 1.5rem;
        border-radius: 10px;
        // flex-grow: 1;
        width: 430px;
        height: 150px;

        .avatar {
          width: 100px;
          height: 100px;
          border-radius: 50%;
          background-color: var(--dark);
          background-size: cover;
          background-position: center;
        }

        .info {
          display: flex;
          flex-direction: column;

          .name {
            font-size: 24px;
            font-weight: 600;
            color: var(--violet);
          }

          .email {
            font-size: 14px;
            color: var(--grey);
          }

          .role {
            font-size: 14px;
            color: var(--grey-dark);
          }
        }
      }

      // .actions {
        display: flex;
        // flex-direction: column;
        gap: 1rem;
        // background-color: white;

        .card {
          width: 150px;
          height: 140px;
          background-color: var(--generic);
          // padding: 1rem;
          border-radius: 10px;
          display: flex;
          align-items: center;
          gap: 0.75rem;
          font-size: 14px;
          color: var(--grey);
          justify-content: center;
          text-align: center;
          flex-direction: column;
          transition: background-color 0.3s ease;

          &:hover {
            background-color: var(--dark-sea);
          }

          .icon {
            width: 32px;
            height: 32px;
            fill: var(--grey);
            stroke: var(--grey);
          }
        }
      // }
    }

    .grids-container {
      display: flex;
      gap: 1rem;

      .grid1 {
        max-width: 430px;
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 1rem;

        // background-color: green;
   
        .card {
          // margin-right: 5px;
          width: 210px;
          height: 60px;
          background-color: var(--generic);
          padding: 1rem;
          border-radius: 10px;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-direction: column;
          gap: 0.5rem;
          font-size: 14px;
          color: var(--grey);
          text-align: center;
          transition: background-color 0.3s ease;

          &:hover {
            background-color: var(--dark-sea);
          }

          .icon {
            width: 32px;
            height: 32px;
            fill: var(--grey);
            stroke: var(--grey);
          }
        }
      }

      .grid2 {
        @extend .grid1;
        // width: 100%;
        flex-direction: column;
        gap: 10px;
        // background-color: red;
        // grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));

        // border: 2px solid red;
        
        .card{
          // width: 100%;
          height: 100px;
        }
      }
    }
  }
}

